{"version":3,"sources":["components/InputNickname.js","components/User.js","components/UserList.js","components/Filter.js","components/App.js","serviceWorker.js","index.js"],"names":["InputNickname","props","placeholder","type","value","inputValue","onChange","handleInputChange","onClick","handleAddButton","library","add","faTimes","faStar","User","user","handleDeleteClick","handleFavoriteClick","className","key","id","src","avatar_url","alt","name","href","html_url","target","rel","login","company","style","favorite","color","icon","UserList","users","display","map","filter","FilterCheck","border","handleAllClick","handleFavClick","App","state","e","setState","preventDefault","handleAllDisplay","handleFavDisplay","bind","handleFetchData","fetch","response","status","json","data","this","fetchedData","noDuplicate","forEach","singleUser","undefined","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.309bcd9a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InputNickname.sass'\r\n\r\nconst InputNickname = (props) => {\r\n    return (\r\n        <form>\r\n            <input placeholder=\"GitHub login...\" type=\"text\" value={props.inputValue} onChange={props.handleInputChange}></input>\r\n            <button onClick={props.handleAddButton}>ADD</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default InputNickname;","import React from 'react';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faTimes, faStar } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nlibrary.add(faTimes, faStar);\r\n\r\nconst User = ({ user, handleDeleteClick, handleFavoriteClick }) => {\r\n    return (\r\n        <div className=\"singleUser\" key={user.id} id={user.id}>\r\n            <div className=\"img\">\r\n                <img src={user.avatar_url} alt=\"profilepic\" />\r\n            </div>\r\n            <div className=\"information\">\r\n                <h1>{user.name}</h1>\r\n                <p><a href={user.html_url} target=\"_blank\" rel=\"noopener noreferrer\">{user.login}</a></p>\r\n                {user.company ? <p>{user.company}</p> : null}\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <button onClick={handleFavoriteClick} id={user.id}><FontAwesomeIcon style={user.favorite ? { color: \"gold\" } : {}} id={user.id} icon=\"star\" /></button>\r\n                <button id={user.id} onClick={handleDeleteClick}><FontAwesomeIcon id={user.id} icon=\"times\" /></button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport './UserList.sass'\r\nimport User from './User'\r\n\r\n\r\n\r\nconst UserList = (props) => {\r\n\r\n    // const displayUsers = props.users.map(user => (\r\n    //     <User handleDeleteClick={props.handleDeleteClick} handleFavoriteClick={props.handleFavoriteClick} user={user} />\r\n    // ))\r\n\r\n\r\n    let users = props.users;\r\n    if (props.display === \"all\") {\r\n        users = users.map(user => <User handleDeleteClick={props.handleDeleteClick} handleFavoriteClick={props.handleFavoriteClick} user={user} />)\r\n    } else if (props.display === \"favorite\") {\r\n        users = users.filter(user => user.favorite);\r\n        users = users.map(user => <User handleDeleteClick={props.handleDeleteClick} handleFavoriteClick={props.handleFavoriteClick} user={user} />)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {users}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserList;","import React from 'react';\r\nimport './Filter.sass'\r\n\r\nconst FilterCheck = (props) => {\r\n    return (\r\n        <div className=\"filterCheck\">\r\n            <button style={props.display === \"all\" ? { border: \"1px solid red\" } : { border: \"1px solid black\" }} onClick={props.handleAllClick}>All</button>\r\n            <button style={props.display === \"favorite\" ? { border: \"1px solid red\" } : { border: \"1px solid black\" }} onClick={props.handleFavClick}>Favorites</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FilterCheck;","import React, { Component } from 'react';\nimport './App.sass';\nimport InputNickname from './InputNickname';\nimport UserList from './UserList'\nimport FilterCheck from './Filter'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleAddButton = this.handleAddButton.bind(this);\n    this.handleFetchData = this.handleFetchData.bind(this);\n  }\n  state = {\n    inputValue: '',\n    users: [],\n    display: \"all\"\n  }\n\n  handleInputChange = (e) => {\n    this.setState({\n      inputValue: e.target.value,\n    })\n  }\n\n  async handleFetchData(name) {\n    let response = await fetch(`https://api.github.com/users/${name}`);\n    if (response.status === 200) {\n      let data = await response.json();\n      return data;\n    }\n  }\n\n  async handleAddButton(e) {\n    e.preventDefault();\n    const fetchedData = await this.handleFetchData(this.state.inputValue);\n    let noDuplicate = true;\n    this.state.users.forEach(singleUser => {\n      if ((fetchedData !== undefined) && (singleUser.login === fetchedData.login)) {\n        noDuplicate = false;\n\n      }\n    })\n    if ((fetchedData !== undefined) && (noDuplicate === true)) {\n      this.setState({\n        users: [...this.state.users, fetchedData],\n        display: \"all\",\n        inputValue: '',\n      })\n    } else {\n      console.log(\"this user doesn't exist or you already have it in your list\");\n      this.setState({\n        inputValue: ''\n      })\n    }\n  };\n\n  handleDeleteClick = (e) => {\n    e.preventDefault();\n    this.setState({\n      users: this.state.users.filter(user => user.id != e.target.id)\n    })\n  }\n\n  handleFavoriteClick = (e) => {\n    e.preventDefault()\n    const users = this.state.users.map(user => {\n      if (user.id == e.target.id) {\n        if (!user.favorite) {\n          user.favorite = true;\n        } else {\n          user.favorite = false;\n        }\n      }\n      return user\n    })\n    this.setState({\n      users: users,\n    })\n  }\n\n  handleAllDisplay = () => {\n    this.setState({\n      display: \"all\",\n    })\n  }\n\n  handleFavDisplay = () => {\n    this.setState({\n      display: \"favorite\",\n    })\n  }\n\n\n\n  render() {\n    return (\n      <>\n        <InputNickname inputValue={this.state.inputValue} handleInputChange={this.handleInputChange} handleAddButton={this.handleAddButton} />\n        <FilterCheck display={this.state.display} handleFavClick={this.handleFavDisplay} handleAllClick={this.handleAllDisplay} />\n        <UserList display={this.state.display} handleFavoriteClick={this.handleFavoriteClick} handleDeleteClick={this.handleDeleteClick} users={this.state.users} />\n      </>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}